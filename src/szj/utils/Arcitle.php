<?php
 namespace szj\utils; use app\common\model\Base; use szj\utils\ArcitleCategory;  Class Arcitle extends Base {  Public function getCateArcitleList($cid = 0,$options = []){ $allChildCid = (new ArcitleCategory)->getRecursionChildCategory($cid,['field'=>'cid,pid']); $childarr = []; if(empty($allChildCid)) return []; foreach($allChildCid as $key=>$val){ $childarr[] = $val['cid']; } $defaultParams = ['field'=>true,'p'=>1,'pagelist'=>15,'order'=>'sort_order,id desc','where'=>[]]; $map = array_merge($defaultParams,$options); $condition = []; $condition[] = ['cid','in',$childarr]; $condition[] = ['is_show','=',1]; $list = $this->where($condition)->where($map['where'])->field($map['field'])->page($map['p'],$map['pagelist'])->order($map['order'])->select(); $total = $this->where($condition)->where($map['where'])->count(); if(empty($list)) return['list'=>[],'total'=>$total]; return ['list'=>$list->toArray(),'total'=>$total]; }  Public function getDefaultCateArcitleList($cid = 0,$options = []){ $allChildCid = (new ArcitleCategory)->getRecursionChildCategory($cid,['field'=>'cid,pid']); $childarr = []; if(empty($allChildCid)) return []; foreach($allChildCid as $key=>$val){ $childarr[] = $val['cid']; } $defaultParams = ['field'=>true,'p'=>1,'pagelist'=>15,'order'=>'sort_order,id desc','where'=>[]]; $map = array_merge($defaultParams,$options); $condition = []; $condition[] = ['cid','in',$childarr]; $condition[] = ['is_show','=',1]; $list = $this->where($condition)->where($map['where'])->field($map['field'])->order($map['order'])->paginate($map['pagelist'],false,$this->pageType); return $list; }  Public function getSingleCidArcitle($cid = 0,$options = []){ $cate_type = (new ArcitleCategory)->where(['cid'=>$cid])->value('cate_type'); if(empty($cate_type)) return false; $defaultParams = ['field'=>true,'where'=>[],'order'=>'sort_order,id desc']; $map = array_merge($defaultParams,$options); $condition = ['cid'=>$cid,'is_show'=>1]; $info = $this->where($condition)->where($map['where'])->order($map['order'])->field($map['field'])->find(); return $info; }  Public function getArcitleInfo($id = 0,$options = []){ if(empty($id)) return false; $defaultParams = ['field'=>true]; $map = array_merge($defaultParams,$options); $info = $this->where(['id'=>$id])->field($map['field'])->find(); return $info; }  Public function getHomeAllArcitle($options = []){ $defaultParams = ['where'=>[],'field'=>true,'order'=>'sort_order,id desc','limit'=>[0,10]]; $map = array_merge($defaultParams,$options); $condition = ['is_home'=>1,'is_show'=>1]; $limit = (new ArcitleCategory)->limitHanadle($map['limit']); $list = $this->where($condition)->where($map['where'])->field($map['field'])->limit($limit[0],$limit[1])->order($map['order'])->select(); if(empty($list)) return []; return $list->toArray(); }  Public function getArcitleNextPrev($id = 0,$options = []){ $cid = $this->where(['id'=>$id,'is_show'=>1])->value('cid'); if(empty($cid)) return false; $defaultParams = ['field'=>true,'where'=>[]]; $map = array_merge($defaultParams,$options); $nextWhere = [['cid','=',$cid],['id','>',$id]]; $prevWhere = [['cid','=',$cid],['id','<',$id]]; $nextInfo = $this->where($nextWhere)->where($map['where'])->order('id,sort_order')->field($map['field'])->find(); $prevInfo = $this->where($prevWhere)->where($map['where'])->order('id desc,sort_order')->field($map['field'])->find(); return ['next'=>$nextInfo,'prev'=>$prevInfo]; }  Public function seachArcitle($keywords = '',$options = []){ if(empty($keywords)) return false; $defaultParams = ['where'=>[],'field'=>true,'p'=>1,'pagelist'=>15,'order'=>'sort_order,id desc']; $map = array_merge($defaultParams,$options); $condition = [['title','like','%'.$keywords.'%'],['is_show','=','1']]; $list = $this->where($condition)->where($map['where'])->field($map['field'])->order($map['order'])->page($map['p'],$map['pagelist'])->select(); $total = $this->where($condition)->where($map['where'])->count(); if(empty($list)) return ['list'=>[],'total'=>$total]; return ['list'=>$list->toArray(),'total'=>$total]; }  Public function seachDefaultArcitle($keywords = '',$options = []){ if(empty($keywords)) return false; $defaultParams = ['where'=>[],'field'=>true,'p'=>1,'pagelist'=>15,'order'=>'sort_order,id desc']; $map = array_merge($defaultParams,$options); $condition = [['title','like','%'.$keywords.'%'],['is_show','=','1']]; $list = $this->where($condition)->where($map['where'])->field($map['field'])->order($map['order'])->paginate($map['pagelist'],false,$this->pageType); return $list; } }