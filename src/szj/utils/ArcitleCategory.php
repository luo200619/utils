<?php
 namespace szj\utils; use app\common\model\Base;  Class ArcitleCategory extends Base {  Public function getCategory($options = []){ $defaultParams = ['where'=>[],'field'=>true,'limit'=>[],'order'=>'sort_order']; $map = array_merge($defaultParams,$options); $limit = $this->limitHanadle($map['limit']); $list = $this->where($map['where'])->field($map['field'])->limit($limit[0],$limit[1])->select(); return $list; }  Public function limitHanadle($limit = []){ try{ if(empty($limit)){ return [0,15]; } if(is_array($limit)){ if(count($limit) == 1){ return [0,intval($limit[0])]; } elseif(count($limit) == 2){ return $limit; } else { return [$limit[0],$limit(count($limit) - 1)]; } } if(is_numeric($limit)){ return [0,$limit]; } $arr = explode(',',$limit); return $arr; } catch(\Exception $err){ return [0,15]; } }  Public function getNavCategory($options = []){ $defaultParams = [ 'where'=>['is_nav'=>1,'is_show'=>1] ]; $list = $this->getCategory(array_merge($defaultParams,$options)); return $list; }  Public function getSingleCategory($options = []){ $defaultParams = [ 'where'=>['cate_type'=>1] ]; $list = $this->getCategory(array_merge($defaultParams,$options)); return $list; }  Public function getListCategory($options = []){ $defaultParams = ['where'=>['cate_type'=>0]]; $list = $this->getCategory(array_merge($defaultParams,$options)); return $list; }  Public function getCategoryInfo($cid = 0,$options = []){ $defaultParams = [ 'field'=>true ]; if(empty($cid)) return false; $map = array_merge($defaultParams,$options); $info = $this->where(['cid'=>$cid])->field($map['field'])->find(); return $info; }  Public function getRecursionChildCategory($pid = 0,$options = []){ $defaultParams = ['field'=>true,'limit'=>'0,3000']; $list = $this->getCategory(array_merge($defaultParams,$options)); if(empty($list)) return []; $recursionData = nodeAddRecursion($list->toArray(),$pid,'cid'); $info = $this->getCategoryInfo($pid,array_merge($defaultParams,$options)); if(empty($info)) return []; $tmpData = $info->toArray(); $tmpData['child'] = $recursionData; return nodeRecursionToOneArray([$tmpData]); }  Public function getRecursionParentCategory($cid = 0,$options = []){ $defaultParams = ['field'=>true,'limit'=>'0,3000']; $list = $this->getCategory(array_merge($defaultParams,$options)); if(empty($list)) return []; $tmpData = nodeParentsRecurtion($list->toArray(),$cid,'cid'); return $tmpData; } }