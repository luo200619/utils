<?php
 namespace szj\utils; use szj\utils\Baidu;  Class BaiduFace extends Baidu{  private $detectUrl = 'https://aip.baidubce.com/rest/2.0/face/v3/detect';  private $searchUrl = 'https://aip.baidubce.com/rest/2.0/face/v3/search';  private $userAddUrl = 'https://aip.baidubce.com/rest/2.0/face/v3/faceset/user/add';  private $userUpdateUrl = 'https://aip.baidubce.com/rest/2.0/face/v3/faceset/user/update';  private $faceDeleteUrl = 'https://aip.baidubce.com/rest/2.0/face/v3/faceset/face/delete';  private $userGetUrl = 'https://aip.baidubce.com/rest/2.0/face/v3/faceset/user/get';  private $faceGetlistUrl = 'https://aip.baidubce.com/rest/2.0/face/v3/faceset/face/getlist';  private $groupGetusersUrl = 'https://aip.baidubce.com/rest/2.0/face/v3/faceset/group/getusers';  private $userCopyUrl = 'https://aip.baidubce.com/rest/2.0/face/v3/faceset/user/copy';  private $userDeleteUrl = 'https://aip.baidubce.com/rest/2.0/face/v3/faceset/user/delete';  private $groupAddUrl = 'https://aip.baidubce.com/rest/2.0/face/v3/faceset/group/add';  private $groupDeleteUrl = 'https://aip.baidubce.com/rest/2.0/face/v3/faceset/group/delete';  private $groupGetlistUrl = 'https://aip.baidubce.com/rest/2.0/face/v3/faceset/group/getlist';  private $personVerifyUrl = 'https://aip.baidubce.com/rest/2.0/face/v3/person/verify';  private $videoSessioncodeUrl = 'https://aip.baidubce.com/rest/2.0/face/v1/faceliveness/sessioncode';  private $videoFacelivenessUrl = 'https://aip.baidubce.com/rest/2.0/face/v1/faceliveness/verify';  private $faceverifyUrl = 'https://aip.baidubce.com/rest/2.0/face/v3/faceverify';  private $matchUrl = 'https://aip.baidubce.com/rest/2.0/face/v3/match';  Public function __construct($config = []){ parent::__construct($config); }  Public function detect($imgurl = '',$options = []){ $map = ['max_face_num'=>1,'image_type'=>'BASE64','face_field'=>'face_type,gender,age,face_token,beauty,expression,glasses,quality']; $postdata = array_merge($map,$options); $tmpData = $this->commonHanadle($imgurl,$postdata,$this->detectUrl,'人脸检测成功'); if(empty($tmpData['err'])){ $info = $postdata['max_face_num'] > 1?$tmpData['data']['result']['face_list']:$tmpData['data']['result']['face_list'][0]; $result = appResult('人脸检测成功',$info,false); } else { $result = $tmpData; } return $result; }  Public function search($imgurl = '', $group = 'admin', $options = []){ $map = ['max_user_num'=>1,'image_type'=>'BASE64','group_id_list'=>$group,'quality_control'=>'NORMAL', 'liveness_control'=>'NORMAL']; $postdata = array_merge($map,$options); $tmpData = $this->commonHanadle($imgurl,$postdata,$this->searchUrl,'人脸搜索成功'); if(empty($tmpData['err'])){ $info = $postdata['max_user_num'] > 1?$tmpData['data']['result']['user_list']:$tmpData['data']['result']['user_list'][0]; $result = appResult('人脸搜索成功',$info,false); } else { $result = $tmpData; } return $result; }  Public function addUser($imgurl, $user_id = 0, $group = 'admin', $options = []){ $map = ['user_id'=>$user_id,'image_type'=>'BASE64','group_id'=>$group,'quality_control'=>'NORMAL', 'liveness_control'=>'NORMAL']; $postdata = array_merge($map,$options); $tmpData = $this->commonHanadle($imgurl,$postdata,$this->userAddUrl,'人脸注册成功'); if(empty($tmpData['err'])){ $result = appResult('人脸注册成功',$tmpData['data']['result'],false); } else { $result = $tmpData; } return $result; }  Public function updateUser($imgurl, $user_id = 0,$group = 'admin',$options = []){ $map = ['user_id'=>$user_id,'image_type'=>'BASE64','group_id'=>$group,'quality_control'=>'NORMAL', 'liveness_control'=>'NORMAL']; $postdata = array_merge($map,$options); $tmpData = $this->commonHanadle($imgurl,$postdata,$this->userUpdateUrl,'人脸更新成功'); if(empty($tmpData['err'])){ $result = appResult('人脸更新成功',$tmpData['data']['result'],false); } else { $result = $tmpData; } return $result; }  Public function deleteUser($user_id = 0,$group = 'admin',$options = []){ $params = $this->getAccessToken(); if($params['err']) return $params; $url = $this->buildUrl($this->userDeleteUrl,['access_token'=>$params['data']]); $map = ['user_id'=>$user_id,'group_id'=>$group]; $postdata = array_merge($map,$options); try{ $resultJson = curl_post($url,$postdata,['Content-Type'=>'application/x-www-form-urlencoded']); if(empty($resultJson)) return appResult('接口请求错误,请检查您的网络是否正确'); $arr = json_decode($resultJson,true); if(!empty($arr['error_code'])) return appResult($arr['error_msg']); return appResult('删除成功',$arr['log_id'],false); } catch(\Exception $err){ return appResult($err->getMessage()); } }  Public function groupAdd($group = '', $options = []){ $params = $this->getAccessToken(); if($params['err']) return $params; $url = $this->buildUrl($this->groupAddUrl,['access_token'=>$params['data']]); $map = ['group_id'=>$group]; $postdata = array_merge($map,$options); try{ $resultJson = curl_post($url,$postdata,['Content-Type'=>'application/x-www-form-urlencoded']); if(empty($resultJson)) return appResult('接口请求错误,请检查您的网络是否正确'); $arr = json_decode($resultJson,true); if(!empty($arr['error_code'])) return appResult($arr['error_msg']); return appResult('用户组创建成功',$arr['log_id'],false); } catch(\Exception $err){ return appResult($err->getMessage()); } }  Public function groupDelete($group = '', $options = []){ $params = $this->getAccessToken(); if($params['err']) return $params; $url = $this->buildUrl($this->groupDeleteUrl,['access_token'=>$params['data']]); $map = ['group_id'=>$group]; $postdata = array_merge($map,$options); try{ $resultJson = curl_post($url,$postdata,['Content-Type'=>'application/x-www-form-urlencoded']); if(empty($resultJson)) return appResult('接口请求错误,请检查您的网络是否正确'); $arr = json_decode($resultJson,true); if(!empty($arr['error_code'])) return appResult($arr['error_msg']); return appResult('用户组删除成功',$arr['log_id'],false); } catch(\Exception $err){ return appResult($err->getMessage()); } }  Public function getGroupList($options = []){ $params = $this->getAccessToken(); if($params['err']) return $params; $url = $this->buildUrl($this->groupGetlistUrl,['access_token'=>$params['data']]); $map = ['start'=>0,'length'=>15]; $postdata = array_merge($map,$options); try{ $resultJson = curl_post($url,$postdata,['Content-Type'=>'application/x-www-form-urlencoded']); if(empty($resultJson)) return appResult('接口请求错误,请检查您的网络是否正确'); $arr = json_decode($resultJson,true); if(!empty($arr['error_code'])) return appResult($arr['error_msg']); return appResult('数据查询成功',$arr['result']['group_id_list'],false); } catch(\Exception $err){ return appResult($err->getMessage()); } }  Public function personVerify($imgurl = '', $idcardno = '', $username = '', $options = []){ $map = ['image_type'=>'BASE64','id_card_number'=>$idcardno,'quality_control'=>'NORMAL','liveness_control'=>'NORMAL','name'=>$username]; $postdata = array_merge($map,$options); $result = $this->commonHanadle($imgurl,$postdata,$this->personVerifyUrl,'用户身份验证成功'); return $result; }  Public function faceverify($imgurl = '',$options = []){ $params = $this->checkImgUrlAndAccessToken($imgurl); if($params['err']) return $params; $url = $this->buildUrl($this->faceverifyUrl,['access_token'=>$params['data']]); $map = ['image_type'=>'BASE64','face_field'=>'face_type,gender,age,face_token,beauty,expression,glasses,quality']; $postdata = [array_merge(['image'=>base64_encode(file_get_contents($imgurl))],$map,$options)]; try{ $resultJson = curl_post($url,json_encode($postdata),['Content-Type'=>'application/x-www-form-urlencoded']); if(empty($resultJson)) return appResult('接口请求错误,请检查您的网络是否正确'); $arr = json_decode($resultJson,true); if(!empty($arr['error_code'])) return appResult($arr['error_msg']); return appResult('活体检测成功',$arr['result'],false); } catch(\Exception $err){ return appResult($err->getMessage()); } }  Public function match($imgurl = '',$distimgurl = '',$options = []){ $params = $this->checkImgUrlAndAccessToken($imgurl); if($params['err']) return $params; if(!file_exists($distimgurl)) return appResult('对比的图片不存在'); $url = $this->buildUrl($this->matchUrl,['access_token'=>$params['data']]); $map = ['image_type'=>'BASE64','quality_control'=>'NORMAL','liveness_control'=>'NORMAL']; $item = array_merge(['image'=>base64_encode(file_get_contents($imgurl))],$map,$options); $postdata = [$item,array_merge(['image'=>base64_encode(file_get_contents($distimgurl))],$map,$options)]; try{ $resultJson = curl_post($url,json_encode($postdata),['Content-Type'=>'application/x-www-form-urlencoded']); if(empty($resultJson)) return appResult('接口请求错误,请检查您的网络是否正确'); $arr = json_decode($resultJson,true); if(!empty($arr['error_code'])) return appResult($arr['error_msg']); return appResult('人脸对比成功',$arr['result'],false); } catch(\Exception $err){ return appResult($err->getMessage()); } }  Public function getUser($user_id = 0, $group = 'admin', $options = []){ $params = $this->getAccessToken(); if($params['err']) return $params; $url = $this->buildUrl($this->userGetUrl,['access_token'=>$params['data']]); $map = ['user_id'=>$user_id,'group_id'=>$group]; $postdata = array_merge($map,$options); try{ $resultJson = curl_post($url,$postdata,['Content-Type'=>'application/x-www-form-urlencoded']); if(empty($resultJson)) return appResult('接口请求错误,请检查您的网络是否正确'); $arr = json_decode($resultJson,true); if(!empty($arr['error_code'])) return appResult($arr['error_msg']); return appResult('用户信息查询成功',$arr['result']['user_list'][0],false); } catch(\Exception $err){ return appResult($err->getMessage()); } }  Public function getGroupUsers($group = 'admin', $options = []){ $params = $this->getAccessToken(); if($params['err']) return $params; $url = $this->buildUrl($this->groupGetusersUrl,['access_token'=>$params['data']]); $map = ['group_id'=>$group,'start'=>0,'length'=>15]; $postdata = array_merge($map,$options); try{ $resultJson = curl_post($url,$postdata,['Content-Type'=>'application/x-www-form-urlencoded']); if(empty($resultJson)) return appResult('接口请求错误,请检查您的网络是否正确'); $arr = json_decode($resultJson,true); if(!empty($arr['error_code'])) return appResult($arr['error_msg']); return appResult('用户列表查询成功',$arr['result']['user_id_list'],false); } catch(\Exception $err){ return appResult($err->getMessage()); } } }