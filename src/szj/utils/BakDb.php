<?php
 namespace szj\utils; use think\console\Command; use think\console\Input; use think\console\input\Argument; use think\console\input\Option; use think\console\Output;  Class BakDb extends Command{  Protected $configName = 'sqlbak_conf.php';  Protected function configure(){ $this->setName('szjbakdb')->addOption('bak','B',Option::VALUE_REQUIRED,'whether to add backup commands') ->setDescription('automatic database backup command for author szjcomo'); }  Protected function execute(Input $input,Output $output){ if($input->hasOption('bak')){ $bak = $input->getOption('bak'); if(empty(trim($bak))) $output->writeLn('please input bak command is false or true'); try{ $result = false; if($bak == 'true'){ $result = $this->databaseAddBak(); } elseif($bak == 'false'){ $result = $this->databaseClearBak(); } $result?$output->writeLn('szjbakdb command exec SUCCESS'):$output->writeLn('szjbakdb command exec fial'); } catch(\Exception $err){ $output->writeLn($err->getMessage()); } } else { $output->writeLn('please input bak command is false or true'); } }  Private function databaseAddBak(){ try{ $this->addConfig()->insertSourceExecAction(); return true; } catch(\Exception $err){ throw $err; } }  Private function addConfig(){ $filePath = \think\Container::get('app')->getConfigPath(); if(!file_exists($filePath.$this->configName)){ $str = '<?php'."\r\n\r\n\t".'return ['."\r\n\t\t".'/**'."\r\n\t\t".'* 每隔多少条备份一次'; $str .="\r\n\t\t".'*/'."\r\n\t\t".'\'total\'=>2,'."\r\n\t\t"; $str .= '/**'."\r\n\t\t".'* 执行当前的类实例'."\r\n\t\t".'*/'."\r\n\t\t"; $str .= '\'callback\'=>[\'class\'=>\'\\app\\index\\controller\\Index\',\'action\'=>\'sqlbak\']'."\r\n\t".'];'; if(false == file_put_contents($filePath.$this->configName,$str)) throw new \Exception("数据库备份文件配置写入失败", 1); } return $this; }  Private function insertSourceExecAction(){ $sourceConnectionPath = $this->normalizePath(\think\Container::get('app')->getThinkPath().'library/think/db/Connection.php'); $reg = '/\$this->numRows = \$this->PDOStatement->rowCount\(\);/'; $findStr = '\szj\utils\DbBack::setActions(null,null,$this->getRealSql($sql,$bind).\'|\'.time());'; $tostr = '$this->numRows = $this->PDOStatement->rowCount();'."\r\n\t\t\t".'\szj\utils\DbBack::setActions(null,null,$this->getRealSql($sql,$bind).\'|\'.time());'."\r\n"; $orgContent = file_get_contents($sourceConnectionPath); if(empty($orgContent)) throw new \Exception("未能读取源代码文件,请联系szjcomo", 1); $content = preg_replace([$reg],[$tostr],str_replace($findStr,'',$orgContent)); if(false == file_put_contents($sourceConnectionPath,$content)){ throw new \Exception('write Connection.php action fail'); } }  Protected function normalizePath($path){ $parts = []; $path = strtr($path, '\\', '/'); $prefix = ''; $absolute = false; if (preg_match('{^([0-9a-z]+:(?://(?:[a-z]:)?)?)}i', $path, $match)) { $prefix = $match[1]; $path = substr($path, strlen($prefix)); } if (substr($path, 0, 1) === '/') { $absolute = true; $path = substr($path, 1); } $up = false; foreach (explode('/', $path) as $chunk) { if ('..' === $chunk && ($absolute || $up)) { array_pop($parts); $up = !(empty($parts) || '..' === end($parts)); } elseif ('.' !== $chunk && '' !== $chunk) { $parts[] = $chunk; $up = '..' !== $chunk; } } return $prefix . ($absolute ? '/' : '') . implode('/', $parts); }  Private function databaseClearBak(){ try{ $this->clearConfig()->removeSourceExecAction(); return true; } catch(\Exception $err){ throw $err; } }  Private function clearConfig(){ $filePath = \think\Container::get('app')->getConfigPath(); if(file_exists($filePath.$this->configName)){ unlink($filePath.$this->configName); } return $this; }  Private function removeSourceExecAction(){ $sourceConnectionPath = $this->normalizePath(\think\Container::get('app')->getThinkPath().'library/think/db/Connection.php'); $findStr = '\szj\utils\DbBack::setActions(null,null,$this->getRealSql($sql,$bind).\'|\'.time());'; $orgContent = file_get_contents($sourceConnectionPath); if(empty($orgContent)) throw new \Exception("未能读取源代码文件,请联系szjcomo", 1); $content = str_replace($findStr,'',$orgContent); if(false == file_put_contents($sourceConnectionPath,$content)){ throw new \Exception('write Connection.php action fail'); } } }