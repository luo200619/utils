<?php
 namespace szj\utils;  Class Excel {  Private $dataTitle = [];  Private $defaultSheetTitle = '';  Private $config = [ 'fontName'=>'宋体', 'fontSize'=>12, 'horizontal'=>'', 'vertical'=>'', 'beforeExport'=>'', 'defaultSheetTitle'=>'demo' ];  Public function __construct($conf = []){ $this->config['horizontal'] = \PHPExcel_Style_Alignment::HORIZONTAL_CENTER; $this->config['vertical'] = \PHPExcel_Style_Alignment::VERTICAL_CENTER; $this->config = array_merge($this->config,$conf); $this->setDefaultSheetTitle($this->config['defaultSheetTitle']); }  Public function getObjPHPExcel(){ return new \PHPExcel(); }  Public function export(&$data = [],$dataTitle = [],$save = '',$type = 'Excel5'){ if(!empty($dataTitle)){ $this->setSheetHead($dataTitle); } $headResult = $this->getCellTitleFields($data); if(empty($headResult)){ return appResult('请输入需要写入的数据'); } $objPHPExcel = $this->getObjPHPExcel(); $objSheet = $objPHPExcel->getActiveSheet(); $this->setDefaultStyle($objSheet); if(!empty($this->defaultSheetTitle)){ $objSheet->setTitle($this->defaultSheetTitle); } if(!empty($this->config['beforeExport'])){ call_user_func($this->config['beforeExport'],$objSheet); } $this->writeSheetData($objSheet,$data,$headResult); $objWriter = \PHPExcel_IOFactory::createWriter($objPHPExcel,$type); if(empty($save)){ header("Cache-Control:must-revalidate, post-check=0, pre-check=0"); header("Content-Type:application/force-download"); header("Content-Type:application/vnd.ms-execl"); header("Content-Type:application/octet-stream"); header("Content-Type:application/download");; if($type == 'Excel5'){ header('Content-Disposition:attachment;filename='.time().'.xls'); } else { header('Content-Disposition:attachment;filename='.time().'.xlsx'); } header("Content-Transfer-Encoding:binary"); $objWriter->save('php://output'); } else { $objWriter->save($save); return file_exists($save); } }  Private function setDefaultStyle(&$objSheet){  $default = $objSheet->getDefaultStyle(); $default->getFont()->setName($this->config['fontName'])->setSize($this->config['fontSize']);  $default->getAlignment()->setVertical($this->config['vertical'])->setHorizontal($this->config['horizontal']); }  Private function writeSheetData(&$objSheet = null,&$data = [],&$headResult = []){ if(!empty($this->dataTitle)){ $callback = function($val,$key) use(&$objSheet){ $objSheet->setCellValue($key,$val['name']); }; array_walk($this->dataTitle,$callback); } foreach($data as $key=>$item){ if(empty($this->dataTitle)){ $curIndex = 0; foreach($item as $k=>$v){ $objSheet->setCellValue($headResult[$curIndex]['column'].($headResult[$curIndex]['index']+$key),$v); $curIndex++; } } else { foreach($headResult as $k=>$v){ $tmp = $this->dataTitle[$v['column'].$v['index']]; $field = $tmp['field']; $callback = empty($tmp['callback'])?false:$tmp['callback']; $curCell = $v['column'].($v['index']+ $key + 1); $curType = empty($tmp['type'])?false:$tmp['type']; if($callback === false){ $value = empty($item[$field])?'':$item[$field]; } else { $value = call_user_func($callback,$item[$field],$item,$objSheet,$curCell); } switch($curType){ case 'float': $objSheet->getStyle($curCell)->getNumberFormat()->setFormatCode("0.00"); break; } $objSheet->setCellValue($curCell,$value); } } } }  Private function getCellTitleFields(&$data = []){ $newKeys = []; if(empty($this->dataTitle)){ if(!empty($data) && !empty($data[0])){ $columnCount = count($data[0]); $arr = range('A', 'Z'); $tmparr = range(1,$columnCount); $callback = function($val,$key) use(&$newKeys,&$arr){ $newKeys[] = ['index'=>1,'column'=>$arr[$key]]; }; array_walk($tmparr,$callback); } } else { $keys = array_keys($this->dataTitle); $callback = function($val,$key) use (&$newKeys){ $number = $this->findNum($val); $column = str_replace($number,'',$val); $newKeys[] = ['index'=>$number,'column'=>$column]; }; array_walk($keys, $callback); } return $newKeys; }  Private function findNum($str = ''){ $str = trim($str); if(empty($str)){ return ''; } $result = ''; for($i=0;$i<strlen($str);$i++){ if(is_numeric($str[$i])){ $result .= $str[$i]; } } return $result; }  Public function setSheetHead(&$dataTitle = []){ $this->dataTitle = $dataTitle; return $this; }  Public function setSheetTitle($index = 0,$title = ''){ return $this; }  Public function setDefaultSheetTitle($title = ''){ $this->defaultSheetTitle = $title; return $this; }  Public function import($fileName = '',$defaultIndex = 0){ $reader = $this->getReaderObj($fileName); if (empty($reader)){ return appResult("不是有效的excel文件"); } $excelObj = $reader->load($fileName); $sheet = $excelObj->getSheet($defaultIndex); $result = $this->getExcelData($sheet); return appResult("数据读取成功",$result,false); }  Private function getExcelData(&$sheet){  $highestRowNum = $sheet->getHighestRow(); $highestColumn = $sheet->getHighestColumn(); $highestColumnNum = \PHPExcel_Cell::columnIndexFromString($highestColumn); $usefullColumnNum = $highestColumnNum;  $data = []; for( $i=1; $i <= $highestRowNum ;$i++ ){ $row = array(); for( $j = 0; $j < $usefullColumnNum;$j++ ){ $cellName = \PHPExcel_Cell::stringFromColumnIndex($j).$i; $cellVal = $sheet->getCell($cellName)->getValue(); if($cellVal instanceof \PHPExcel_RichText){  $cellVal = $cellVal->__toString(); } $row[ ] = $cellVal; } $data []= $row; } return $data; }  Private function getReaderObj($fileName = ''){ $PHPExcel = $this->getObjPHPExcel(); $PHPReader = new \PHPExcel_Reader_Excel2007(); if(!$PHPReader->canRead($fileName)){ $PHPReader = new \PHPExcel_Reader_Excel5(); if(!$PHPReader->canRead($fileName)){ return false; } } return $PHPReader; } }