<?php
 namespace szj\utils\wxSdk;  Class WechatSignal {  const MSGTYPE_TEXT = 'text'; const MSGTYPE_IMAGE = 'image'; const MSGTYPE_LOCATION = 'location'; const MSGTYPE_LINK = 'link'; const MSGTYPE_EVENT = 'event'; const MSGTYPE_MUSIC = 'music'; const MSGTYPE_NEWS = 'news'; const MSGTYPE_VOICE = 'voice'; const MSGTYPE_VIDEO = 'video'; const MSGTYPE_SHORTVIDEO= 'shortvideo';  Public static function checkSignature($token = ''){ $echostr = \think\facade\Request::get('echostr',''); $signature = \think\facade\Request::get('signature',''); $timestamp = \think\facade\Request::get('timestamp',''); $nonce = \think\facade\Request::get('nonce',''); $tmpArr = array($token, $timestamp, $nonce); sort($tmpArr); $tmpStr = implode( $tmpArr ); $tmpStr = sha1( $tmpStr ); return $tmpStr == $signature ? $echostr : 'not access'; }  Public static function start($config = []){ $arr = self::getEvent(); return $arr; }  Public static function getEvent(){ $xmlStr = file_get_contents("php://input"); libxml_disable_entity_loader(true); if (!empty($xmlStr)) { $xmlObj = @simplexml_load_string($xmlStr, 'SimpleXMLElement', LIBXML_NOCDATA | LIBXML_NOBLANKS); return json_decode(json_encode($xmlObj),true); } else { return false; } }  Public static function arrayToXml($data = [],$root='xml', $attr =''){ if(is_array($attr)){ $_attr = array(); foreach ($attr as $key => $value) { $_attr[] = "{$key}=\"{$value}\""; } $attr = implode(' ', $_attr); } $attr = trim($attr); $attr = empty($attr) ? '' : " {$attr}"; $xml = ''; $xml .= "<{$root}{$attr}>"; $xml .= self::data_to_xml($data); $xml .= "</{$root}>"; return $xml; }  Public static function data_to_xml($data) { $xml = ''; foreach ($data as $key => $val) { is_numeric($key) && $key = "item"; $xml .= "<$key>"; $xml .= ( is_array($val) || is_object($val)) ? self::data_to_xml($val) : self::xmlSafeStr($val); list($key, ) = explode(' ', $key); $xml .= "</$key>"; } return $xml; }  Public static function xmlSafeStr($str){ return '<![CDATA['.preg_replace("/[\\x00-\\x08\\x0b-\\x0c\\x0e-\\x1f]/",'',$str).']]>'; }  Public static function replyText($content = '',$wxMsg = []){ $options = ['Content'=>$content]; return self::arrayToXml(self::baseReplyData($wxMsg,self::MSGTYPE_TEXT,$options)); }  Public static function replyNews($data = [],$wxMsg = []){ $options = ['ArticleCount'=>count($data),'Articles'=>self::toUcField($data,true)]; return self::arrayToXml(self::baseReplyData($wxMsg,self::MSGTYPE_NEWS,$options)); }  Public static function replyMusic($data = [],$wxMsg = []){ $options = ['Music'=>self::toUcField($data)]; return self::arrayToXml(self::baseReplyData($wxMsg,self::MSGTYPE_MUSIC,$options)); }  Public static function replyImage($mediaId = '',$wxMsg = []){ $options = ['Image'=>['MediaId'=>$mediaId]]; return self::arrayToXml(self::baseReplyData($wxMsg,self::MSGTYPE_IMAGE,$options)); }  Public static function replyVoice($mediaId = '',$wxMsg = []){ $options = ['Voice'=>['MediaId'=>$mediaId]]; return self::arrayToXml(self::baseReplyData($wxMsg,self::MSGTYPE_VOICE,$options)); }  Public static function replyVideo($data = [],$wxMsg = []){ $options = ['Video'=>self::toUcField($data)]; return self::arrayToXml(self::baseReplyData($wxMsg,self::MSGTYPE_VIDEO,$options)); }  Protected static function baseReplyData($wxMsg = [],$type = '',$options = []){ $msg = [ 'ToUserName' => $wxMsg['FromUserName'], 'FromUserName' => $wxMsg['ToUserName'], 'MsgType' => $type, 'CreateTime' => szjTime() ]; return array_merge($msg,$options); }  Protected static function toUcField($data = [],$next = false){ $newData = []; $callback = function($val,$key) use(&$newData,$next){ if($next){ foreach($val as $k=>$v){ $newData[$key][ucwords($k)] = $v; } } else { $newData[ucwords($key)] = $val; } }; array_walk($data, $callback); return $newData; }  Public static function run($obj = null,$wxMsg = []){ try{ switch ($wxMsg['MsgType']) { case self::MSGTYPE_TEXT: $result = self::ObjCallMethod($obj,'callbackText',$wxMsg,self::MSGTYPE_TEXT); break; case self::MSGTYPE_IMAGE: $result = self::ObjCallMethod($obj,'callbackImage',$wxMsg,self::MSGTYPE_IMAGE); break; case self::MSGTYPE_VOICE: $result = self::ObjCallMethod($obj,'callbackVoice',$wxMsg,self::MSGTYPE_VOICE); break; case self::MSGTYPE_VIDEO: case self::MSGTYPE_SHORTVIDEO: $result = self::ObjCallMethod($obj,'callbackVideo',$wxMsg,self::MSGTYPE_VIDEO); break; case self::MSGTYPE_LOCATION: $result = self::ObjCallMethod($obj,'callbackLocation',$wxMsg,self::MSGTYPE_LOCATION); break; case self::MSGTYPE_LINK: $result = self::ObjCallMethod($obj,'callbackLink',$wxMsg,self::MSGTYPE_LINK); break; case self::MSGTYPE_EVENT: $result = self::ObjCallMethod($obj,'callbackEvent',$wxMsg,self::MSGTYPE_EVENT); break; default: $result = ['type'=>'text','data'=>'温馨提示：对不起,事件的回复消息不存在']; break; } } catch(\Exception $err){ $result = ['type'=>'text','data'=>$err->getMessage()]; } return self::reply($result,$wxMsg); }  Protected static function ObjCallMethod(&$obj = null,$action = '',$wxMsg = [],$type = ''){  try{ if(method_exists($obj,$action)){ $params = ['openid'=>$wxMsg['FromUserName']]; if(!empty($wxMsg['MsgId'])) $params['msgid'] = $wxMsg['MsgId']; switch($type){ case self::MSGTYPE_TEXT: $params['text'] = $wxMsg['Content']; break; case self::MSGTYPE_IMAGE: $params['picurl'] = $wxMsg['PicUrl']; $params['mediaid'] = $wxMsg['MediaId']; break; case self::MSGTYPE_VOICE: $params['mediaid'] = $wxMsg['MediaId']; $params['format'] = $wxMsg['Format']; break; case self::MSGTYPE_VIDEO: $params['mediaid'] = $wxMsg['MediaId']; $params['thumbMediaid'] = $wxMsg['ThumbMediaId']; break; case self::MSGTYPE_LOCATION: $params['location_x'] = $wxMsg['Location_X']; $params['location_y'] = $wxMsg['Location_Y']; $params['scale'] = $wxMsg['Scale']; $params['label'] = $wxMsg['Label']; break; case self::MSGTYPE_LINK: $params['title'] = $wxMsg['Title']; $params['description'] = $wxMsg['Description']; $params['url'] = $wxMsg['Url']; break; case self::MSGTYPE_EVENT: $params['event'] = strtolower($wxMsg['Event']); if(isset($wxMsg['EventKey'])) $params['eventkey'] = $wxMsg['EventKey']; if(isset($wxMsg['Ticket'])) $params['ticket'] = $wxMsg['Ticket']; if(isset($wxMsg['Latitude'])) $params['latitude'] = $wxMsg['Latitude']; if(isset($wxMsg['Longitude'])) $params['longitude'] = $wxMsg['Longitude']; if(isset($wxMsg['Precision'])) $params['precision'] = $wxMsg['Precision']; break; } $result = call_user_func(array(&$obj,$action),$params,$wxMsg); } else { $result = ['type'=>'text','data'=>'系统消息：对不起,系统没有找到相对应的响应方法']; } } catch(\Exception $err){ $result = ['type'=>'text','data'=>$err->getMessage()]; } return $result; }  Protected static function reply($info = [],$wxMsg = []){ try{ switch($info['type']){ case self::MSGTYPE_TEXT: $result = self::replyText($info['data'],$wxMsg); break; case self::MSGTYPE_NEWS: $result = self::replyNews($info['data'],$wxMsg); break; case self::MSGTYPE_IMAGE: $result = self::replyImage($info['data'],$wxMsg); break; case self::MSGTYPE_VOICE: $result = self::replyVoice($info['data'],$wxMsg); break; case self::MSGTYPE_VIDEO: $result = self::replyVideo($info['data'],$wxMsg); break; default: $result = self::replyText('系统提醒：对不起,暂未查询相关的回复消息',$wxMsg); } } catch(\Exception $err){ $result = slef::replyText($err->getMessage(),$wxMsg); } return $result; } }