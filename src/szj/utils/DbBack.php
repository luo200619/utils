<?php
 namespace szj\utils;  Class DbBack {  Public static $actions = [];  Public static function run(){ self::_begin_run(); try{ $callback = function($val,$key){ call_user_func([&$val['obj'],trim($val['action'])],$val['options']); }; array_walk(self::$actions, $callback); self::$actions = []; } catch(\Exception $err){ error_log($err->getMessage()."\r\n",3,'error.log'); } }  Public static function setActions($object = null,$callback = null,$options = null){ if(empty($object)) $object = new self; if(empty($callback)) $callback = 'backDb'; if(!empty($object) && !empty($callback) && is_object($object) && method_exists($object,$callback)){ self::$actions[] = ['obj'=>($object),'action'=>$callback,'options'=>($options)]; } }  Private static function _begin_run(){}  public function backDb($sqlMsg = ''){ if(!empty($sqlMsg)) { $destination = $this->getMasterLogFile(); $path = dirname($destination); !is_dir($path) && mkdir($path, 0755, true); error_log($sqlMsg."\r\n",3,$destination); } }  Public function getMasterLogFile(){ $savePath = \think\Container::get('app')->getRuntimePath().'backdb'.DIRECTORY_SEPARATOR; $fileName = date('d').'.log'; return $savePath.$fileName; } }